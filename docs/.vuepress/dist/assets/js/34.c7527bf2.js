(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{326:function(e,t,a){"use strict";a.r(t);var n=a(13),s=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("title: Yii2 框架\nspeaker: Lorne Qi")]),e._v(" "),t("slide"),e._v(" "),t("h1",{attrs:{id:"yii2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yii2"}},[e._v("#")]),e._v(" Yii2")]),e._v(" "),t("p",[e._v("Lorne Qi")]),e._v(" "),t("slide"),e._v(" "),t("h2",{attrs:{id:"认识-yii2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#认识-yii2"}},[e._v("#")]),e._v(" 认识 Yii2")]),e._v(" "),t("ul",[t("li",[e._v("Yii2 是一个高性能，基于组件的 PHP 框架，用于快速开发现代 Web 应用程序")])]),e._v(" "),t("slide"),e._v(" "),t("h2",{attrs:{id:"目录结构和入口脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#目录结构和入口脚本"}},[e._v("#")]),e._v(" 目录结构和入口脚本")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("初级目录结构")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("├── assets\n├── commands\n├── config\n├── controllers\n├── models\n├── runtime\n├── tests\n├── vendor\n├── views\n├── web\n├── LICENSE.md\n├── README.md\n├── yii\n└── yii.bat\n")])])])])]),e._v(" "),t("slide"),e._v(" "),t("ul",[t("li",[t("p",[e._v("高级模板目录结构")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("├── backend  // 后端应用程序，是一个独立的应用程序\n├── common // 公共目录，每一个应用都可用\n├── console // 控制台应用程序\n├── environments // 环境相关的目录\n├── frontend // 前端应用程序目录\n├── tests // 测试\n├── vendor // 这是 Composer 安装的其他程序的存放目录，包含 Yii 框架本身，也放在这个目录下面\n├── composer.json\n├── composer.lock\n├── init\n├── init.bat\n├── LICENSE.md\n├── README.md\n├── yii\n└── yii.bat\n")])])])])]),e._v(" "),t("slide"),e._v(" "),t("ul",[t("li",[t("p",[e._v("入口脚本")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 定义模式\ndefined('YII_DEBUG') or define('YII_DEBUG', true);\n// 定义环境 dev，prod，test\ndefined('YII_ENV') or define('YII_ENV', 'dev');\n// 这个是 composer 的类自动加载机制注册文件，引入这个文件后，可以使用 composer 的类自动加载功能\nrequire __DIR__ . '/../vendor/autoload.php';\n// 这是 Yii 的工具类文件，引入了这个类文件后，才能使用 Yii 的提供的各种工具， 才有 Yii::createObject()、Yii::$app 之类的东西可以使用\nrequire __DIR__ . '/../vendor/yiisoft/yii2/Yii.php';\n// 引入配置文件\n$config = require __DIR__ . '/../config/web.php';\n// 以 $config 为参数，实例化了一个 Application 对象，并调用他的 run() 函数。 这时，Yii 应用就跑起来了\n(new yii\\web\\Application($config))->run();\n")])])])]),e._v(" "),t("li",[t("p",[e._v("控制台入口脚本")]),e._v(" "),t("ul",[t("li",[e._v("yii 是一个使用 PHP 运行的脚本")])])])]),e._v(" "),t("slide"),e._v(" "),t("h2",{attrs:{id:"基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[e._v("#")]),e._v(" 基本概念")]),e._v(" "),t("h3",{attrs:{id:"属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[e._v("#")]),e._v(" 属性")]),e._v(" "),t("ul",[t("li",[e._v("在 PHP 中类的成员变量也被称为属性，在 yii 中实现属性主要是通过 yii/base/BaseObject 这个类来实现属性的")]),e._v(" "),t("li",[e._v("在给不可访问属性赋值时，__set() 会被调用")]),e._v(" "),t("li",[e._v("读取不可访问属性的值时，__get() 会被调用")]),e._v(" "),t("li",[e._v("在 Yii2 中实现属性的步骤\n"),t("ul",[t("li",[e._v("继承 yii/base/BaseObject 类")]),e._v(" "),t("li",[e._v("声明一个用于保存该属性的私有成员变量")]),e._v(" "),t("li",[e._v("提供 getter 或 setter 函数，或两者都提供，用于访问和修改上面提到的私有成员变量。 如果只提供了getter，那么该属性为只读属性，只提供了setter，则为只写")])])])]),e._v(" "),t("slide"),e._v(" "),t("h3",{attrs:{id:"事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[e._v("#")]),e._v(" 事件")]),e._v(" "),t("ul",[t("li",[e._v("事件可以将自定义代码“注入”到现有代码中的特定执行点。 附加自定义代码到某个事件，当这个事件被触发时，这些代码就会自动执行")]),e._v(" "),t("li",[e._v("Yii2 中与事件相关的两个类\n"),t("ul",[t("li",[t("p",[e._v("yii\\base\\Component 事件是在这个类中引入的，需要使用事件时，要从 yii\\base\\Component 中继承")])]),e._v(" "),t("li",[t("p",[e._v("yii\\base\\Event 封装了与事件相关的数据，提供了一些函数供使用")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Event extends Object\n{\n    public $name;               // 事件名\n    public $sender;             // 事件发布者，通常是调用了 trigger() 的对象或类。\n    public $handled = false;    // 是否终止事件的后续处理\n    public $data;               // 事件相关数据\n    private static $_events = [];\n    public static function on($class, $name, $handler, $data = null,\n        $append = true)\n    {\n        // 用于绑定事件 handler\n    }\n    public static function off($class, $name, $handler = null)\n    {\n        // 用于取消事件 handler 绑定\n    }\n    public static function hasHandlers($class, $name)\n    {\n        // 用于判断是否有相应的 handler 与事件对应\n    }\n    public static function trigger($class, $name, $event = null)\n    {\n        // 用于触发事件\n    }\n}\n")])])])])])])]),e._v(" "),t("slide"),e._v(" "),t("ul",[t("li",[e._v("事件 handler\n"),t("ul",[t("li",[t("p",[e._v("事件处理器是一个 PHP 回调函数， 当它所附加到的事件被触发时它就会执行。可以使用以下回调函数之一")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 处理器是全局函数\n$foo->on(Foo::EVENT_HELLO, 'function_name');\n// 处理器是对象方法\n$foo->on(Foo::EVENT_HELLO, [$object, 'methodName']);\n// 处理器是静态类方法\n$foo->on(Foo::EVENT_HELLO, ['app\\components\\Bar', 'methodName']);\n// 处理器是匿名函数\n$foo->on(Foo::EVENT_HELLO, function ($event) {\n//事件处理逻辑\n});\n")])])])])])])]),e._v(" "),t("slide"),e._v(" "),t("ul",[t("li",[e._v("事件处理器顺序\n"),t("ul",[t("li",[t("p",[e._v("一个事件可以附加多个事件处理器，当事件被触发，已附加的处理器将按附加次序依次调用")])]),e._v(" "),t("li",[t("p",[e._v("如果某个处理器需要停止其后的处理器调用，可以设置 $event 参数的 yii\\base\\Event::$handled 属性为真")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$eventTest->on(EventTest::EVENT_HELLO, function ($event) {\n    // 停止后面的处理器调用\n    $event->handled = true;\n});\n")])])])]),e._v(" "),t("li",[t("p",[e._v("可以通过设置 on 方法传第四个参数 false，将处理器插入到处理器队列第一位，被首先调用")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$eventTest->on(EventTest::EVENT_HELLO, function ($event) {\n// 这个处理器将被插入到处理器队列的第一位，首先被调用\n}, null, false);\n")])])])])])])]),e._v(" "),t("slide"),e._v(" "),t("ul",[t("li",[e._v("触发事件\n"),t("ul",[t("li",[e._v("事件通过调用 yii\\base\\Component::trigger() 方法触发")])])]),e._v(" "),t("li",[e._v("移除事件处理器\n"),t("ul",[t("li",[t("p",[e._v("调用 yii\\base\\Component::off() 方法")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 处理器是全局函数\n$foo->off(Foo::EVENT_HELLO, 'function_name');\n// 处理器是对象方法\n$foo->off(Foo::EVENT_HELLO, [$object, 'methodName']);\n// 处理器是静态类方法\n$foo->off(Foo::EVENT_HELLO, ['app\\components\\Bar', 'methodName']);\n// 处理器是匿名函数\n$foo->off(Foo::EVENT_HELLO, $anonymousFunction);\n")])])])])])])]),e._v(" "),t("slide"),e._v(" "),t("h3",{attrs:{id:"行为"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行为"}},[e._v("#")]),e._v(" 行为")]),e._v(" "),t("ul",[t("li",[e._v("基本概念\n"),t("ul",[t("li",[e._v("行为可以在不修改现有类的情况下扩展类的功能，将行为绑定到一个类，可以使类具有行为本身所定义的属性和方法，就好像类本来就有这些属性和方法一样，而且不需要写一个新的类去继承或包含现有类")]),e._v(" "),t("li",[e._v("Yii 中的行为，是 yii\\base\\Behavior 类的实例， 只要将一个 Behavior 实例绑定到任意的 yii\\base\\Component 实例上， 这个 Component 就可以拥有该 Behavior 所定义的属性和方法了")]),e._v(" "),t("li",[e._v("行为只能与 Component 类绑定，所以如果要使用行为，类就要继承 yii\\base\\Component")])])])]),e._v(" "),t("slide"),e._v(" "),t("ul",[t("li",[e._v("绑定行为\n"),t("ul",[t("li",[t("p",[e._v("静态绑定")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("重载 yii\\base\\Component::behaviors() 方法")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("namespace app\\models;\nuse yii\\db\\ActiveRecord;\nuse app\\Components\\MyBehavior;\nclass User extends ActiveRecord\n{\n    public function behaviors()\n    {\n        return [\n            // 匿名的行为，仅直接给出行为的类名称\n            MyBehavior::className(),\n            // 名为 myBehavior2 的行为，也是仅给出行为的类名称\n            'myBehavior2' => MyBehavior::className(),\n            // 匿名行为，给出了MyBehavior类的配置数组\n            [\n                'class' => MyBehavior::className(),\n                'prop1' => 'value1',\n                'prop3' => 'value3',\n            ],\n            // 名为 myBehavior4 的行为，也是给出了 MyBehavior 类的配置数组\n            'myBehavior4' => [\n                'class' => MyBehavior::className(),\n                'prop1' => 'value1',\n                'prop3' => 'value3',\n            ]\n        ];\n    }\n}\n")])])])]),e._v(" "),t("li",[t("p",[e._v("配置数组")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[\n    'as myBehavior2' => MyBehavior::className(),\n    'as myBehavior3' => [\n        'class' => MyBehavior::className(),\n        'prop1' => 'value1',\n        'prop3' => 'value3',\n    ],\n]\n")])])])])])]),e._v(" "),t("li",[t("p",[e._v("动态绑定")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("通过调用 yii\\base\\Compoent::attachBehavior()")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 附加行为对象\n$component->attachBehavior('myBehavior1', new MyBehavior);\n// 附加行为类\n$component->attachBehavior('myBehavior2', MyBehavior::className());\n// 附加配置数组\n$component->attachBehavior('myBehavior3', [\n    'class' => MyBehavior::className(),\n    'prop1' => 'value1',\n    'prop2' => 'value2',\n]);\n")])])])]),e._v(" "),t("li",[t("p",[e._v("通过调用 yii\\base\\Compoent::attachBehaviors()")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$component->attachBehaviors([\n    'myBehavior1' => new MyBehavior,  // 这是一个命名行为\n    MyBehavior::className(),          // 这是一个匿名行为\n]);\n")])])])])])])])])]),e._v(" "),t("slide"),e._v(" "),t("ul",[t("li",[t("p",[e._v("移除行为")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 移除单个行为\n$component->detachBehavior('myBehavior1');\n// 移除全部行为\n$component->detachBehaviors();\n")])])])])]),e._v(" "),t("slide"),e._v(" "),t("ul",[t("li",[t("p",[e._v("行为的内部原理")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("yii\\base\\Component::behaviors()\nyii\\base\\Component::ensureBehaviors()\nyii\\base\\Component::attachBehaviorInternal()\nyii\\base\\Behavior::attach()\n__set,__get,__call\n")])])])])]),e._v(" "),t("slide"),e._v(" "),t("h3",{attrs:{id:"配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[e._v("#")]),e._v(" 配置")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Yii2 的配置文件内容")]),e._v(" "),t("ul",[t("li",[e._v("基本信息配置，主要指如 id、basePath 等这些应用的基本信息，主要是一些简单的字符串")]),e._v(" "),t("li",[e._v("components 配置，配置文件的主体")]),e._v(" "),t("li",[e._v("params 配置，主要是提供一些全局参数")])])]),e._v(" "),t("li",[t("p",[e._v("组件配置的格式")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[\n    // 数组元素表示将要创建的对象的完整类名\n    'class' => 'path\\to\\ClassName',\n    // 表示指定为 propertyName 属性的初始值为 $propertyValue\n    'propertyName' => 'propertyValue',\n    // 表示将 $eventHandler 绑定到对象的 eventName 事件中\n    'on eventName' => $eventHandler,\n    // 表示用 $behaviorConfig 创建一个行为，并注入到对象中。 这里的 $behaviroConfig 也是一个配置项\n    'as behaviorName' => $behaviorConfig,\n]\n")])])])])]),e._v(" "),t("slide"),e._v(" "),t("ul",[t("li",[e._v("配置产生作用的原理\n"),t("ul",[t("li",[e._v("入口脚本中 $application = new yii\\web\\Application($config)")]),e._v(" "),t("li",[e._v("yii\\base\\Component::__construct($config)")]),e._v(" "),t("li",[e._v("yii\\base\\Application::preInit() 预处理配置项")]),e._v(" "),t("li",[e._v("yii\\base\\Component::__construct()")]),e._v(" "),t("li",[e._v("yii\\base\\Object::__construct($config)")]),e._v(" "),t("li",[e._v("Yii::configure() 对对象进行配置")]),e._v(" "),t("li",[e._v("yii\\di\\ServiceLocator::setComponents() 设置组件")]),e._v(" "),t("li",[e._v("yii\\di\\ServiceLocator::set()")])])]),e._v(" "),t("li",[e._v("服务定位器\n"),t("ul",[t("li",[e._v("$_components 以 key-value 形式保存组件对象")]),e._v(" "),t("li",[e._v("$_definitions 以 key-value 形式保存组件定义")])])]),e._v(" "),t("li",[e._v("获取配置文件中配置的组件对象\n"),t("ul",[t("li",[e._v("通过 Yii::$app->componentName 获取")]),e._v(" "),t("li",[e._v("调用 yii\\di\\ServiceLocator::__get() 方法")]),e._v(" "),t("li",[e._v("调用 yii\\di\\ServiceLocator::get() 方法")]),e._v(" "),t("li",[e._v("调用 Yii::createObject() 方法")])])]),e._v(" "),t("li",[e._v("配置项的本质\n"),t("ul",[t("li",[e._v("所有的配置项目最终都是在向 Application 这个 Service Locator 注册服务")])])])]),e._v(" "),t("slide"),e._v(" "),t("h2",{attrs:{id:"mvc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[e._v("#")]),e._v(" MVC")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Model")]),e._v(" "),t("ul",[t("li",[e._v("是代表业务数据、规则和逻辑的对象")]),e._v(" "),t("li",[e._v("继承 yii\\base\\Model 实现")]),e._v(" "),t("li",[e._v("主要方法\n"),t("ul",[t("li",[e._v("rules() 当模型接收到终端用户输入的数据， 数据应当满足某种规则(称为验证规则, 也称为业务规则)")]),e._v(" "),t("li",[e._v("attributes() 定义模型属性")]),e._v(" "),t("li",[e._v("fields() 来增加、删除、重命名和重定义字段，请求 api 返回的字段就是该方法中定义的字段")])])]),e._v(" "),t("li",[e._v("配合数据库工作 yii\\db\\ActiveRecord\n"),t("ul",[t("li",[e._v("ActiveRecord 提供了一个面向对象的接口， 用以访问和操作数据库中的数据。ActiveRecord 类与数据库表关联， ActiveRecord 实例对应于该表的一行， ActiveRecord 实例的属性表示该行中特定列的值")]),e._v(" "),t("li",[e._v("ActiveRecord 及其父类提供了 findOne，findAll，updateOne 等方法")])])])])]),e._v(" "),t("li",[t("p",[e._v("View")]),e._v(" "),t("ul",[t("li",[e._v("视图是 MVC 模式中的一部分，它是展示数据到终端用户的代码")])])]),e._v(" "),t("li",[t("p",[e._v("Controller")]),e._v(" "),t("ul",[t("li",[e._v("是继承 yii\\base\\Controller 类的对象，负责处理请求和生成响应，控制器从应用主体接管控制后会分析请求数据并传送到模型，传送模型结果到视图，最后生成输出响应信息")])])])]),e._v(" "),t("slide"),e._v(" "),t("h2",{attrs:{id:"请求和响应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请求和响应"}},[e._v("#")]),e._v(" 请求和响应")]),e._v(" "),t("h3",{attrs:{id:"路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[e._v("#")]),e._v(" 路由")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("默认路由")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("http://www.test.com/index.php?r=post/view&amp;id=100\n")])])])]),e._v(" "),t("li",[t("p",[e._v("美化 url")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("http://www.test.com/post/view/100\n")])])])]),e._v(" "),t("li",[t("p",[e._v("路由规则")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'rules' => [\n    // 为路由指定了一个别名，以 post 的复数形式来表示 post/index 路由\n    'posts' => 'post/index',\n    // id 是命名参数，post/100 形式的URL，其实是 post/view&amp;id=100\n    'post/&lt;id:\\d+>' => 'post/view',\n    // controller action 和 id 以命名参数形式出现\n    '&lt;controller:\\w->/&lt;id:\\d+>/&lt;action:(create|update|delete)>' => '&lt;controller>/&lt;action>',\n    // 包含了 HTTP 方法限定，仅限于DELETE方法\n    'DELETE &lt;controller:\\w+>/&lt;id:\\d+>' => '&lt;controller>/delete',\n]\n")])])])])]),e._v(" "),t("slide"),e._v(" "),t("h3",{attrs:{id:"url-管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#url-管理"}},[e._v("#")]),e._v(" Url 管理")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("urlManager 组件")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'urlManager' => [\n    // 是否启用 url 美化功能\n    'enablePrettyUrl' => true,\n    // 是否启用严格解析，如启用，要求当前请求应至少匹配 1 个路由规则，否则认为是无效路由，仅在 enablePrettyUrl 启用后才有效。\n    'enableStrictParsing' => true,\n     // 指定是否在URL在保留入口脚本 index.php\n    'showScriptName' => false,\n    // 指定续接在URL后面的一个后缀，如 .html 之类的。仅在 enablePrettyUrl 启用时有效\n    'suffix' => '.html'\n    // 配置的路由规则\n    'rules' => [\n        'PUT api/&lt;controller:[\\w-]+>/&lt;id:>' => '&lt;controller>/update',\n        'GET api/&lt;controller:[\\w-]+>/&lt;id:[0-9]>' => '&lt;controller>/view',\n        'DELETE api/&lt;controller:[\\w-]+>/&lt;id:>' => '&lt;controller>/delete',\n        'POST api/&lt;controller:[\\w-]+>' => '&lt;controller>/create',\n        'GET api/&lt;controller:[\\w-]+>s' => '&lt;controller>/index',\n        'api/&lt;controller:[\\w-]+>/&lt;action:[\\w-]+>' => '&lt;controller>/&lt;action>',\n    ],\n],\n")])])])])]),e._v(" "),t("slide"),e._v(" "),t("h3",{attrs:{id:"请求-request-和响应-response"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请求-request-和响应-response"}},[e._v("#")]),e._v(" 请求(Request)和响应(Response)")]),e._v(" "),t("ul",[t("li",[e._v("yii 一次完整的请求路径\n"),t("ul",[t("li",[e._v("yii\\base\\Application::run() 方法中统一获取请求")]),e._v(" "),t("li",[e._v("yii\\web\\Application::handleRequest() 处理请求")]),e._v(" "),t("li",[e._v("yii\\web\\Request::resolve() 解析请求")]),e._v(" "),t("li",[e._v("yii\\web\\UrlManager::parseRequest() 解析请求")]),e._v(" "),t("li",[e._v("yii\\base\\Module::runAction() 执行 action")]),e._v(" "),t("li",[e._v("yii\\base\\Module::createController() 创建对应 controller 实例")]),e._v(" "),t("li",[e._v("yii\\base\\Controller::runAction() 方法，执行 action")]),e._v(" "),t("li",[e._v("yii\\base\\Controller::createAction() 创建 action 实例")]),e._v(" "),t("li",[e._v("yii\\base\\InlineAction::runWithParams()  执行 controller 下对应的 actionMethod")])])])]),e._v(" "),t("slide"),e._v(" "),t("h2",{attrs:{id:"restful-web-服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#restful-web-服务"}},[e._v("#")]),e._v(" Restful web 服务")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("使用美化的 url 实现对增删改查")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("http://www.test.com/post/create\nhttp://www.test.com/post/delete/1\nhttp://www.test.com/post/update/1\nhttp://www.test.com/post/index/1\nhttp://www.test.com/post/view/1\n")])])])])]),e._v(" "),t("slide"),e._v(" "),t("ul",[t("li",[e._v("Yii 中实现 Restful 风格 api 的步骤\n"),t("ol",[t("li",[t("p",[e._v("创建继承自 ActiveRecord 的 model 类")])]),e._v(" "),t("li",[t("p",[e._v("创建 controller 继承 yii\\rest\\ActiveController，设置 $modelClass 属性")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("namespace app\\controllers;\nuse yii\\rest\\ActiveController;\nclass UserController extends ActiveController\n{\n    public $modelClass = 'app\\models\\User';\n}\n")])])])]),e._v(" "),t("li",[t("p",[e._v("配置 URL 规则")])]),e._v(" "),t("li",[t("p",[e._v("启用 JSON 输入")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'request' => [\n    'parsers' => [\n        'application/json' => 'yii\\web\\JsonParser',\n    ]\n]\n")])])])])])])]),e._v(" "),t("slide"),e._v(" "),t("h2",{attrs:{id:"服务定位器和-di-容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务定位器和-di-容器"}},[e._v("#")]),e._v(" 服务定位器和 DI 容器")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("服务定位器和 DI 容器的关系")]),e._v(" "),t("ul",[t("li",[e._v("在 Yii 中，服务定位器构建与 DI 容器之上")]),e._v(" "),t("li",[e._v("在 BaseYii 中所有的属性和方法都是静态的，包括 DI 容器 $container，所以就形成了单例模式，所有的 Service Locator （Module 和 Application）都共用这个 DI 容器")])])]),e._v(" "),t("li",[t("p",[e._v("DI 容器的引入")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("require __DIR__ . '/../vendor/yiisoft/yii2/Yii.php';\n")])])])])]),e._v(" "),t("slide"),e._v(" "),t("ul",[t("li",[e._v("Application 的本质\n"),t("ul",[t("li",[t("p",[e._v("继承结构")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Application extends \\yii\\base\\Application\nabstract class Application extends Module\nclass Module extends ServiceLocator\n")])])])]),e._v(" "),t("li",[t("p",[e._v("所以在 Yii 中，Application 本质上是服务定位器 Service Locator")])])])])]),e._v(" "),t("slide"),e._v(" "),t("ul",[t("li",[e._v("Yii 中实例创建方法\n"),t("ul",[t("li",[t("p",[e._v("Yii::createObject()")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public static function createObject($type, array $params = [])\n{\n    // 字符串，代表一个类名、接口名、别名\n    if (is_string($type)) {\n        // 调用 DI 容器的 get() 来获取、创建实例\n        return static::$container->get($type, $params);\n    // 是个数组，代表配置数组，必须含有 class 元素\n    } elseif (is_array($type) &amp;&amp; isset($type['class'])) {\n        $class = $type['class'];\n        unset($type['class']);\n        return static::$container->get($class, $params, $type);\n    // 是个 PHP callable 则调用其返回一个具体实例\n    } elseif (is_callable($type, true)) {\n        return static::$container->invoke($type, $params);\n    } elseif (is_array($type)) {\n        throw new InvalidConfigException('Object configuration must be an array containing a \"class\" element.');\n    }\n    throw new InvalidConfigException('Unsupported configuration type');\n}\n")])])])]),e._v(" "),t("li",[t("p",[e._v("yii\\di\\Container::get()")])])])]),e._v(" "),t("li",[e._v("Yii中所有的实例（除了 Application，DI 容器自身等入口脚本中实例化的），都是通过 DI 容器来获取的")])]),e._v(" "),t("slide"),e._v(" "),t("h2",{attrs:{id:"faq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#faq"}},[e._v("#")]),e._v(" FAQ")]),e._v(" "),t("h3",{attrs:{id:"如何安装-composer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何安装-composer"}},[e._v("#")]),e._v(" 如何安装 Composer？")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-qO")]),e._v(" /usr/local/bin/composer https://mirrors.aliyun.com/composer/composer.phar\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("755")]),e._v(" /usr/local/bin/composer\n")])])]),t("h3",{attrs:{id:"如何解决-composer-安装-yii2-慢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何解决-composer-安装-yii2-慢"}},[e._v("#")]),e._v(" 如何解决 Composer 安装 Yii2 慢？")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("composer")]),e._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-g")]),e._v(" repo.packagist "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("composer")]),e._v(" https://mirrors.aliyun.com/composer/\n")])])]),t("h3",{attrs:{id:"如何安装-mongodb-的-php-driver"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何安装-mongodb-的-php-driver"}},[e._v("#")]),e._v(" 如何安装 MongoDB 的 PHP driver？")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" php-mongodb\n")])])]),t("h3",{attrs:{id:"写了接口-postman-为何调不通"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写了接口-postman-为何调不通"}},[e._v("#")]),e._v(" 写了接口，Postman 为何调不通？")]),e._v(" "),t("ul",[t("li",[e._v("检查接口名，controller、action 名字是否拼错。")]),e._v(" "),t("li",[e._v("检查 URL 规则是否配置正确。")])])],1)}),[],!1,null,null,null);t.default=s.exports}}]);