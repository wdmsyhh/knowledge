(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{332:function(_,e,v){"use strict";v.r(e);var t=v(14),r=Object(t.a)({},(function(){var _=this,e=_._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("p",[_._v("title: PHP 进阶\nspeaker: Zach Zhang")]),_._v(" "),e("slide"),_._v(" "),e("h1",{attrs:{id:"php-进阶"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#php-进阶"}},[_._v("#")]),_._v(" PHP 进阶")]),_._v(" "),e("p",[_._v("Zach Zhang")]),_._v(" "),e("slide"),_._v(" "),e("h2",{attrs:{id:"主要内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主要内容"}},[_._v("#")]),_._v(" 主要内容")]),_._v(" "),e("ul",[e("li",[_._v("trait")]),_._v(" "),e("li",[_._v("匿名类")]),_._v(" "),e("li",[_._v("静态绑定")]),_._v(" "),e("li",[_._v("命名空间")]),_._v(" "),e("li",[_._v("错误处理")]),_._v(" "),e("li",[_._v("生成器")]),_._v(" "),e("li",[_._v("PHP 扩展")]),_._v(" "),e("li",[_._v("Composer")])]),_._v(" "),e("slide"),_._v(" "),e("h3",{attrs:{id:"trait"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#trait"}},[_._v("#")]),_._v(" Trait")]),_._v(" "),e("p",[_._v("一种代码复用的方法，无法实例化，通过 use 使用。")]),_._v(" "),e("ul",[e("li",[_._v("trait 与 class 相同，支持定义静态方法、属性、抽象方法。")]),_._v(" "),e("li",[_._v("优先级：当前类的成员覆盖了 trait 的方法，而 trait 则覆盖了被继承的方法。")]),_._v(" "),e("li",[_._v("冲突以及解决：如果两个 trait 都插入了一个同名的方法，如果没有明确解决冲突将会产生一个致命错误。")])]),_._v(" "),e("slide"),_._v(" "),e("h3",{attrs:{id:"匿名类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#匿名类"}},[_._v("#")]),_._v(" 匿名类")]),_._v(" "),e("p",[_._v("创建一次性的简单对象，可以传递参数到匿名类的构造器，也可以扩展（extends）其他类、实现接口（implement interface），以及像其他普通的类一样 use trait。")]),_._v(" "),e("ul",[e("li",[_._v("匿名类被嵌套进普通 class 后，不能访问这个外部类的 private、protected 方法或者属性。 为了访问外部类 protected 属性或方法，匿名类可以 extends 此外部类。 为了使用外部类的 private 属性，必须通过构造器传进来。")]),_._v(" "),e("li",[_._v("声明的同一个匿名类，所创建的对象都是这个类的实例。")])]),_._v(" "),e("slide"),_._v(" "),e("h3",{attrs:{id:"后期静态绑定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#后期静态绑定"}},[_._v("#")]),_._v(" 后期静态绑定")]),_._v(" "),e("p",[_._v("用于在继承范围内引用静态调用的类，通过 "),e("code",[_._v("static::")]),_._v(" 调用，不再被解析为定义当前方法所在的类，而是在实际运行时计算的。也可以称之为“静态绑定”，因为它可以用于（但不限于）静态方法的调用。")]),_._v(" "),e("ul",[e("li",[_._v("转发调用：\n"),e("ul",[e("li",[_._v("指的是通过以下几种方式进行的静态调用："),e("code",[_._v("self::")]),_._v("，"),e("code",[_._v("parent::")]),_._v("，"),e("code",[_._v("static::")]),_._v(" 以及 "),e("code",[_._v("forward_static_call()")]),_._v("。")])])]),_._v(" "),e("li",[_._v("self：使用 "),e("code",[_._v("self::")]),_._v(" 或者 "),e("code",[_._v("__CLASS__")]),_._v(" 对当前类的静态引用，取决于定义当前方法所在的类。")]),_._v(" "),e("li",[_._v("static：运行时对象所属的类。")]),_._v(" "),e("li",[_._v("后期静态绑定的解析会一直到取得一个完全解析了的静态调用为止。另一方面，如果静态调用使用 "),e("code",[_._v("parent::")]),_._v(" 或者 "),e("code",[_._v("self::")]),_._v(" 将转发调用信息。")])]),_._v(" "),e("slide"),_._v(" "),e("h3",{attrs:{id:"命名空间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命名空间"}},[_._v("#")]),_._v(" 命名空间")]),_._v(" "),e("p",[_._v("通过 "),e("code",[_._v("namespace")]),_._v(" 关键字定义。")]),_._v(" "),e("ul",[e("li",[_._v("在 PHP 中，命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题：\n"),e("ul",[e("li",[_._v("用户编写的代码与 PHP 内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。")]),_._v(" "),e("li",[_._v("为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。")])])]),_._v(" "),e("li",[_._v("定义命名空间：\n"),e("ul",[e("li",[_._v("PHP 命名空间也允许指定层次化的命名空间的名称。因此，命名空间的名字可以使用分层次的方式定义。")]),_._v(" "),e("li",[_._v("也可以在同一个文件中定义多个命名空间。")])])]),_._v(" "),e("li",[_._v("基本概念：\n"),e("ul",[e("li",[_._v("非限定名称：名称中不包含命名空间分隔符的标识符，例如 "),e("code",[_._v("Foo")]),_._v("。")]),_._v(" "),e("li",[_._v("限定名称：名称中含有命名空间分隔符的标识符，例如 "),e("code",[_._v("Foo\\Bar")]),_._v("。")]),_._v(" "),e("li",[_._v("完全限定名称：名称中包含命名空间分隔符，并以命名空间分隔符开始的标识符，例如 "),e("code",[_._v("\\Foo\\Bar")]),_._v("。")])])])]),_._v(" "),e("slide"),_._v(" "),e("h4",{attrs:{id:"名称解析规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#名称解析规则"}},[_._v("#")]),_._v(" 名称解析规则")]),_._v(" "),e("ul",[e("li",[_._v("对完全限定名称的函数，类和常量的调用在编译时解析。例如 "),e("code",[_._v("new \\A\\B")]),_._v(" 解析为类 "),e("code",[_._v("A\\B")]),_._v("。")]),_._v(" "),e("li",[_._v("所有的非限定名称和限定名称（非完全限定名称）根据当前的导入规则在编译时进行转换。例如，如果命名空间 "),e("code",[_._v("A\\B\\C")]),_._v(" 被导入为 C，那么对 "),e("code",[_._v("C\\D\\e()")]),_._v(" 的调用就会被转换为 "),e("code",[_._v("A\\B\\C\\D\\e()")]),_._v("。")]),_._v(" "),e("li",[_._v("在命名空间内部，所有的没有根据导入规则转换的限定名称均会在其前面加上当前的命名空间名称。例如，在命名空间 "),e("code",[_._v("A\\B")]),_._v(" 内部调用 "),e("code",[_._v("C\\D\\e()")]),_._v("，则 "),e("code",[_._v("C\\D\\e()")]),_._v(" 会被转换为 "),e("code",[_._v("A\\B\\C\\D\\e()")]),_._v("。")]),_._v(" "),e("li",[_._v("非限定类名根据当前的导入规则在编译时转换（用全名代替短的导入名称）。例如，如果命名空间 "),e("code",[_._v("A\\B\\C")]),_._v(" 导入为 C，则 "),e("code",[_._v("new C()")]),_._v(" 被转换为 "),e("code",[_._v("new A\\B\\C()")]),_._v("。")]),_._v(" "),e("li",[_._v("在命名空间内部（例如 "),e("code",[_._v("A\\B")]),_._v(" ），对非限定名称的函数调用是在运行时解析的。例如对函数 "),e("code",[_._v("foo()")]),_._v(" 的调用是这样解析的：\n"),e("ul",[e("li",[_._v("在当前命名空间中查找名为 "),e("code",[_._v("A\\B\\foo()")]),_._v(" 的函数。")]),_._v(" "),e("li",[_._v("尝试查找并调用 全局(global) 空间中的函数 "),e("code",[_._v("foo()")]),_._v("。")])])]),_._v(" "),e("li",[_._v("在命名空间（例如 "),e("code",[_._v("A\\B")]),_._v(" ）内部对非限定名称或限定名称类（非完全限定名称）的调用是在运行时解析的。下面是调用 "),e("code",[_._v("new C()")]),_._v(" 的解析:\n"),e("ul",[e("li",[_._v("在当前命名空间中查找 "),e("code",[_._v("A\\B\\C")]),_._v(" 类。")]),_._v(" "),e("li",[_._v("尝试自动装载类 "),e("code",[_._v("A\\B\\C")]),_._v("。")])])])]),_._v(" "),e("slide"),_._v(" "),e("ul",[e("li",[_._v("命名空间与类的自动加载：\n"),e("ul",[e("li",[e("code",[_._v("__autoload()")]),_._v("：尝试加载未定义的类，只能有一个该方法，使用第三方扩展时可能会造成冲突，弃用。")]),_._v(" "),e("li",[e("code",[_._v("spl_autoload_register()")]),_._v(" 函数可以注册任意数量的自动加载器，当使用尚未被定义的类（class）和接口（interface）时自动去加载。通过注册自动加载器，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类。")]),_._v(" "),e("li",[e("a",{attrs:{href:"https://learnku.com/docs/psr/psr-4-autoloader-example/1609",target:"_blank",rel:"noopener noreferrer"}},[_._v("PSR4 autoloader example"),e("OutboundLink")],1),_._v("。")])])])]),_._v(" "),e("slide"),_._v(" "),e("h3",{attrs:{id:"反射"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[_._v("#")]),_._v(" 反射")]),_._v(" "),e("p",[_._v("PHP 自 5.0 版本以后添加了反射机制，它提供了一套强大的反射 API，许你在 PHP 运行环境中，访问和使用类、方法、属性、参数和注释等。")]),_._v(" "),e("ul",[e("li",[_._v("访问：需要建立类 A 的反射类实例（"),e("a",{attrs:{href:"https://www.php.net/manual/zh/class.reflectionclass.php",target:"_blank",rel:"noopener noreferrer"}},[_._v("ReflectionClass"),e("OutboundLink")],1),_._v("），然后基于这个实例可以访问类 A 中的属性或者方法。不管类中定义的成员权限声明是否为 public，都可以获取到。\n"),e("ul",[e("li",[_._v("创建反射类时传送的类名，必须包含完整的命名空间，即使使用了 use 关键字。否则找不到类名会抛出异常。")])])]),_._v(" "),e("li",[_._v("交互：创建了反射类的实例，我们不仅可以通过反射类访问原来类的方法和属性，还能创建原来类的实例或则直接调用类里面的方法。\n"),e("ul",[e("li",[_._v("直接访问 "),e("code",[_._v("protected")]),_._v(" 或则 "),e("code",[_._v("private")]),_._v(" 的属性或者方法会抛出异常。")]),_._v(" "),e("li",[_._v("需要调用指定的 "),e("code",[_._v("ReflectionProperty")]),_._v(" 或 "),e("code",[_._v("ReflectionMethod")]),_._v(" 对象 "),e("code",[_._v("setAccessible(true)")]),_._v(" 方法才能访问非公有成员。")]),_._v(" "),e("li",[_._v("修改非公有成员的访问权限只作用于当前的反射类的实例。")]),_._v(" "),e("li",[_._v("需要注意获取静态成员("),e("code",[_._v("ReflectionClass::getStaticPropertyValue")]),_._v(") 和非静态成员("),e("code",[_._v("ReflectionClass::getProperty")]),_._v(") 所使用的方法不一样。")]),_._v(" "),e("li",[_._v("获取父类成员的方法和一般的不一样。")])])]),_._v(" "),e("li",[_._v("其他获取类信息的方法：\n"),e("ul",[e("li",[e("code",[_._v("get_class()")]),_._v("、"),e("code",[_._v("get_called_class()")]),_._v("：获取类信息。")]),_._v(" "),e("li",[e("code",[_._v("get_class_methods()")]),_._v("：返回由类的方法名组成的数组，在类内部调用时会返回 "),e("code",[_._v("private")]),_._v(" 方法。")]),_._v(" "),e("li",[e("code",[_._v("get_class_vars()")]),_._v("：返回由类的默认"),e("strong",[_._v("公有属性")]),_._v("组成的数组，在类内部调用时会返回"),e("strong",[_._v("私有属性")]),_._v("和"),e("strong",[_._v("保护属性")]),_._v("。")])])]),_._v(" "),e("li",[_._v("注意事项：\n"),e("ul",[e("li",[_._v("反射的消耗也很大，在可以找到替代方案的情况下，就不要滥用。")]),_._v(" "),e("li",[_._v("很多时候，善用反射能保持代码的优雅和简洁，但反射也会破坏类的封装性，因为反射可以使本不应该暴露的方法或属性被强制暴露了出来，这既是优点也是缺点。")])])])]),_._v(" "),e("slide"),_._v(" "),e("h3",{attrs:{id:"错误处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[_._v("#")]),_._v(" 错误处理")]),_._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.php.net/manual/en/class.throwable.php",target:"_blank",rel:"noopener noreferrer"}},[_._v("Throwable 接口"),e("OutboundLink")],1),_._v("。\n"),e("ul",[e("li",[_._v("Error 和 Exception。")]),_._v(" "),e("li",[_._v("自定义异常处理，不能直接 implements Throwable 接口，必须通过继承 Exception 类来实现。")])])]),_._v(" "),e("li",[_._v("PHP７ 大多数错误被作为 Error 异常抛出。")]),_._v(" "),e("li",[_._v("Error 类并非继承自 Exception 类，需要 catch(Error $e)。")])]),_._v(" "),e("slide"),_._v(" "),e("h3",{attrs:{id:"生成器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生成器"}},[_._v("#")]),_._v(" 生成器")]),_._v(" "),e("p",[_._v("生成器提供了一种更容易的方法来实现简单的对象迭代，相比较定义类实现 Iterator 接口的方式，性能开销和复杂性大大降低。使用关键词 "),e("code",[_._v("yield")]),_._v("。")]),_._v(" "),e("ul",[e("li",[_._v("生成器允许你在 foreach 代码块中写代码来迭代一组数据而不需要在内存中创建一个数组, 那会使你的内存达到上限，或者会占据可观的处理时间。相反，你可以写一个生成器函数，就像一个普通的自定义函数一样, 和普通函数只返回一次不同的是, 生成器可以根据需要 yield 多次，以便生成需要迭代的值。")])]),_._v(" "),e("h4",{attrs:{id:"php-协程实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#php-协程实现"}},[_._v("#")]),_._v(" PHP 协程实现")]),_._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"http://www.laruence.com/2015/05/28/3038.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("PHP 协程序实现"),e("OutboundLink")],1),_._v("。")]),_._v(" "),e("li",[_._v("协程的支持是在迭代生成器的基础上, 增加了可以回送数据给生成器的功能(调用者发送数据给被调用的生成器函数)，这就把生成器到调用者的单向通信转变为两者之间的双向通信。")])]),_._v(" "),e("slide"),_._v(" "),e("h3",{attrs:{id:"php-扩展管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#php-扩展管理"}},[_._v("#")]),_._v(" PHP 扩展管理")]),_._v(" "),e("ul",[e("li",[_._v("可以通过输出 "),e("code",[_._v("phpinfo()")]),_._v(" 或执行 "),e("code",[_._v("php -m")]),_._v("，查看 PHP 扩展安装情况。")]),_._v(" "),e("li",[_._v("安装扩展：\n"),e("ul",[e("li",[_._v("如果 PHP 是通过 apt 或者 yum 命令安装的，则扩展也可以通过 apt 或者 yum 安装。\n"),e("ul",[e("li",[_._v("利用 "),e("code",[_._v("apt-cache search")]),_._v(" 查找扩展包。")]),_._v(" "),e("li",[e("code",[_._v("apt-get install")]),_._v(" 安装扩展包。")])])]),_._v(" "),e("li",[_._v("使用pecl安装：\n"),e("ul",[e("li",[e("code",[_._v("pecl install {extension name}")]),_._v("。")]),_._v(" "),e("li",[_._v("配置 php.ini。")])])])])])]),_._v(" "),e("slide"),_._v(" "),e("h3",{attrs:{id:"composer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#composer"}},[_._v("#")]),_._v(" Composer")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://docs.phpcomposer.com/00-intro.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("Composer"),e("OutboundLink")],1),_._v(" 是一个依赖管理。它涉及 "),e("code",[_._v("packages")]),_._v(" 和 "),e("code",[_._v("libraries")]),_._v("，但它在每个项目的基础上进行管理，在你项目的某个目录中（例如 vendor）进行安装。")]),_._v(" "),e("ul",[e("li",[_._v("Composer 将这样为你解决问题:\n"),e("ul",[e("li",[_._v("你有一个项目依赖于若干个库。")]),_._v(" "),e("li",[_._v("其中一些库依赖于其他库。")]),_._v(" "),e("li",[_._v("你声明你所依赖的东西。")]),_._v(" "),e("li",[_._v("Composer 会找出哪个版本的包需要安装，并安装它们（将它们下载到你的项目中）。")])])]),_._v(" "),e("li",[_._v("自动加载：\n"),e("ul",[e("li",[_._v("除了库的下载，Composer 还准备了一个自动加载文件，它可以加载 Composer 下载的库中所有的类文件。你只需要将下面这行代码添加到你项目的引导文件中：\n"),e("code",[_._v("require 'vendor/autoload.php';")])])])])]),_._v(" "),e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[_._v("#")]),_._v(" 参考资料")]),_._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.php.net/manual/zh/langref.php",target:"_blank",rel:"noopener noreferrer"}},[_._v("PHP 手册"),e("OutboundLink")],1)]),_._v(" "),e("li",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MjM5NzY5MTE5Mw==&mid=2651554604&idx=1&sn=e1f450b5500e0d3972f73e347fcd431c&chksm=bd29097a8a5e806c3671bb3237e10a1d229ce2c5f5717a09fe9494b779dc785dee73daff9595&mpshare=1&scene=1&srcid=1105GG5gK4xzNrUHqyJa3tv9&sharer_sharetime=1572953021334&sharer_shareid=9e6da2f5e36e563e353f2ebf695b7912#rd",target:"_blank",rel:"noopener noreferrer"}},[_._v("PHP Composer"),e("OutboundLink")],1),_._v("。")]),_._v(" "),e("li",[e("a",{attrs:{href:"https://learnku.com/docs/psr/psr-4-autoloader-example/1609",target:"_blank",rel:"noopener noreferrer"}},[_._v("PSR4 autoloader example"),e("OutboundLink")],1),_._v("。")]),_._v(" "),e("li",[e("a",{attrs:{href:"http://www.laruence.com/2015/05/28/3038.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("PHP 协程序实现"),e("OutboundLink")],1),_._v("。")])])],1)}),[],!1,null,null,null);e.default=r.exports}}]);