(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{289:function(s,t,e){s.exports=e.p+"assets/img/data-types.59337a5d.jpg"},290:function(s,t,e){s.exports=e.p+"assets/img/master-slave.4be1ce1c.jpg"},291:function(s,t,e){s.exports=e.p+"assets/img/string.64191776.jpg"},292:function(s,t,e){s.exports=e.p+"assets/img/hash.138ff75e.jpg"},293:function(s,t,e){s.exports=e.p+"assets/img/list.89ea22f1.jpg"},294:function(s,t,e){s.exports=e.p+"assets/img/set.497f1915.jpg"},295:function(s,t,e){s.exports=e.p+"assets/img/sorted-set.4a261839.jpg"},334:function(s,t,e){"use strict";e.r(t);var a=e(14),i=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("title: Redis 入门\nspeaker: Tony Zheng")]),s._v(" "),t("slide"),s._v(" "),t("h1",{attrs:{id:"redis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[s._v("#")]),s._v(" Redis")]),s._v(" "),t("p",[s._v("Tony Zheng")]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"redis-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis-简介"}},[s._v("#")]),s._v(" Redis 简介")]),s._v(" "),t("p",[s._v("Redis 是由 C 语言编写的开源、基于内存、支持多种数据结构、高性能的 Key-Value 数据库。")]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[s._v("#")]),s._v(" 特性")]),s._v(" "),t("ul",[t("li",[s._v("速度快")]),s._v(" "),t("li",[s._v("持久化")]),s._v(" "),t("li",[s._v("多种数据结构")]),s._v(" "),t("li",[s._v("多语言客户端")]),s._v(" "),t("li",[s._v("功能丰富")]),s._v(" "),t("li",[s._v("主从复制")]),s._v(" "),t("li",[s._v("高可用和集群")])]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"速度快"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#速度快"}},[s._v("#")]),s._v(" 速度快")]),s._v(" "),t("p",[s._v("首先 Redis 是将数据储存在内存中的，通常情况下每秒读写次数达到千万级别。其次 Redis 使用 ANSI C 编写，因为 C 语言接近操作系统，所以 Redis 的执行效率很高。最后 Redis 的处理网络请求部分采用的是单线程，如果想充分利用 CPU 资源的话，可以多开几个 Redis 实例来达到目的，为什么单线程还是速度快的原因呢？我们知道 Redis 的读写都是基于内存的，读写速度都是非常快的，不会出现需要等待很长时间，所以瓶颈并不会出现在请求读写上，所以没必要使用多线程来利用 CPU，如果使用多线程的话（线程数 > CPU数情况下），多线程的创建、销毁、线程切换、线程竞争等开销所需要的时间会比执行读写所损耗的时间还多，那就南辕北辙了，当然这是在数据量小的时候才会这样，如果数据量到达一定量级了，那肯定是多线程比单线程快（线程数 <= CPU 数情况下）。")]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"持久化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#持久化"}},[s._v("#")]),s._v(" 持久化")]),s._v(" "),t("p",[s._v("Redis 可以通过 RDB 和 AOF 两种方式将数据持久化到磁盘上，其中这两种方式的区别如下：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("RDB")]),s._v("(Redis Database)：是在指定的时间间隔内将内存中的数据通过异步生成数据快照并且保存到磁盘中。")]),s._v(" "),t("li",[t("code",[s._v("AOF")]),s._v("(Append Of File)：相对于 RDB 方式，AOF 方式的持久化更细粒度，把每次数据变化（写、删除操作）都记录 AOF 文件中，其中 AOF 又可以配置为 "),t("code",[s._v("always")]),s._v(" 即实时将记录写到 AOF 文件中，"),t("code",[s._v("everysec")]),s._v(" 每隔一秒将记录写到 AOF 文件中，"),t("code",[s._v("no")]),s._v(" 由系统决定何时将记录写到AOF文件中。")])]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"多种数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多种数据结构"}},[s._v("#")]),s._v(" 多种数据结构")]),s._v(" "),t("p",[s._v("Redis支持五种基本的数据结构，分别是 String（字符串）、Hash（哈希）、List（列表）、Set（集合）、Zset（即 Sorted Set 有序集合），这些数据结构类型和我们使用的开发语言的数据结构类型其实是相对应的。")]),s._v(" "),t("p",[t("img",{attrs:{src:e(289),alt:"image"}})]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"多语言客户端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多语言客户端"}},[s._v("#")]),s._v(" 多语言客户端")]),s._v(" "),t("p",[s._v("Redis支持多种语言，诸如 Ruby, Python, Twisted Python, PHP, Erlang, Tcl, Perl, Lua, Java, Scala, Clojure 等。")]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"功能丰富"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#功能丰富"}},[s._v("#")]),s._v(" 功能丰富")]),s._v(" "),t("p",[s._v("Redis支持发布订阅、Lua 脚本、事务、Pipeline 等功能。")]),s._v(" "),t("ul",[t("li",[s._v("pipeline：https://blog.csdn.net/u011489043/article/details/78769428")])]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"主从复制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主从复制"}},[s._v("#")]),s._v(" 主从复制")]),s._v(" "),t("p",[s._v("在 Redis 中，用户可以通过执行 SLAVEOF 命令或者 SLAVEOF 选项，让从服务器去复制主服务器，为高可用和分布式提供了基础。")]),s._v(" "),t("p",[t("img",{attrs:{src:e(290),alt:"image"}})]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"高可用和集群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高可用和集群"}},[s._v("#")]),s._v(" 高可用和集群")]),s._v(" "),t("ul",[t("li",[s._v("高可用：有了主从复制之后的实现之后，如果想对服务器进行监控，那么在 Redis2.6 以后提供了一个Sentinel（哨兵机制）。顾名思义，哨兵的含义就是监控 Redis 系统的运行状态，可以启动多个哨兵，去监控 Redis 数据库的运行状态。其功能有以下两点：\n"),t("ul",[t("li",[s._v("监控所有节点数据库是否正常运行")]),s._v(" "),t("li",[s._v("主数据库出现故障时，可以通过自动投票机制，在从数据库选举出新的主数据库，实现将从数据库转为主数据库的自动切换")])])]),s._v(" "),t("li",[s._v("集群：Redis在 3.0 版本正式引入了 Redis-Cluster 集群这个特征。Redis-Cluster 采用无中心架构，每个节点保存完整的数据和整个集群的状态，每个节点都和其他所有节点连接。")])]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"redis-conf-配置项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis-conf-配置项"}},[s._v("#")]),s._v(" redis.conf 配置项")]),s._v(" "),t("p",[s._v("https://www.runoob.com/redis/redis-conf.html")]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"通用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通用命令"}},[s._v("#")]),s._v(" 通用命令")]),s._v(" "),t("ul",[t("li",[s._v("KEYS [pattern]：符合给定模式的 key 列表。")]),s._v(" "),t("li",[s._v("DBSIZE：返回当前数据库的 key 的数量。")]),s._v(" "),t("li",[s._v("EXISTS key： key 存在，返回 1，不存在返回 0。")]),s._v(" "),t("li",[s._v("DEL key [key...]：删除 key。")]),s._v(" "),t("li",[s._v("EXPIRE key seconds：设置成功返回 1，当 key 不存在或者设置失败的时候返回 0。")]),s._v(" "),t("li",[s._v("PERSIST key：当生存时间移除成功时，返回 1，如果 key 不存在或者没有设置生存时间，返回 0。")]),s._v(" "),t("li",[s._v("TTL key：当 key 不存在时，返回 -2，当 key 存在但是没有设置生存时间时，返回 -1，否则返回 key 的剩余生存时间。")])]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"数据结构-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-string"}},[s._v("#")]),s._v(" 数据结构 - String")]),s._v(" "),t("ul",[t("li",[s._v("字符串是 Redis 中最基础的数据结构。")]),s._v(" "),t("li",[s._v("字符串的值虽然是字符串但是可以保存很多种类型的数据，如：简单的字符串、JSON、XML、数字、二进制等。需要注意一点的是，Redis中字符串类型的值最大能保存512MB。")]),s._v(" "),t("li",[s._v("命令\n"),t("ul",[t("li",[s._v("SET key value")]),s._v(" "),t("li",[s._v("GET key")]),s._v(" "),t("li",[s._v("DEL key")])])])]),s._v(" "),t("p",[t("img",{attrs:{src:e(291),alt:"image"}})]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"数据结构-hash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-hash"}},[s._v("#")]),s._v(" 数据结构 - Hash")]),s._v(" "),t("p",[t("img",{attrs:{src:e(292),alt:"image"}})]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"数据结构-list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-list"}},[s._v("#")]),s._v(" 数据结构 - List")]),s._v(" "),t("p",[t("img",{attrs:{src:e(293),alt:"image"}})]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"数据结构-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-set"}},[s._v("#")]),s._v(" 数据结构 - Set")]),s._v(" "),t("p",[t("img",{attrs:{src:e(294),alt:"image"}})]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"数据结构-sorted-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-sorted-set"}},[s._v("#")]),s._v(" 数据结构 - Sorted Set")]),s._v(" "),t("p",[t("img",{attrs:{src:e(295),alt:"image"}})]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[s._v("#")]),s._v(" 应用场景")]),s._v(" "),t("ul",[t("li",[s._v("String：适合最简单的 k-v 存储，类似于 memcached 的存储结构，短信验证码，配置信息等，就用这种类型来存储。")]),s._v(" "),t("li",[s._v("Hash：一般key为ID或者唯一标示，value对应的就是详情了。如商品详情，个人信息详情，新闻详情等。")]),s._v(" "),t("li",[s._v("List：因为 list 是有序的，比较适合存储一些有序且数据相对固定的数据。如省市区表、字典表等。因为list是有序的，适合根据写入的时间来排序，如：最新的***，消息队列等。")]),s._v(" "),t("li",[s._v("Set：可以简单的理解为 ID-List 的模式，如微博中一个人有哪些好友，set最牛的地方在于，可以对两个 set 提供交集、并集、差集操作。例如：查找两个人共同的好友等。")]),s._v(" "),t("li",[s._v("Sorted Set：是set的增强版本，增加了一个 score 参数，自动会根据 score 的值进行排序。比较适合类似于 top 10 等不根据插入的时间来排序的数据。")])]),s._v(" "),t("slide"),s._v(" "),t("h2",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[s._v("官网：https://redis.io/")]),s._v(" "),t("li",[s._v("Redis Command 简体中文翻译版：https://redis.readthedocs.io/en/2.6/index.html")])])],1)}),[],!1,null,null,null);t.default=i.exports}}]);